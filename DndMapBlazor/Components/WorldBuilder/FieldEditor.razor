@using System.Globalization
@using DndMapBlazor.Helper
@using DndMapBlazor.Models
@inject IJSRuntime JS

@if (loading)
{
    <h2>Loading</h2>
}
else
{

    @if (thisField.mapImage == null)
    {
        <div class="w-100;" style="text-align:center;">
            <InputFile OnChange="LoadFiles" />
        </div>
    }
    else
    {
        <div class="row" style="padding:0px;margin:0px; width:100%">
            <div class="col-4" style="border:2px solid black; padding:5px;">
                <div class="row text-center fw-bolder text-decoration-underline" style="padding-top:10px">
                    <h2>Creator menu</h2>
                </div>

                <div class="row text-center">
                    <p>Grid length horisontal</p>
                    <div class="InputNumber" style="margin:auto">
                        <input step="any" type="number" @bind-value="gridX">
                    </div>
                </div>
                <br />

                <div class="row">
                    <div class="col-12 col-md-6 col-xl-3">
                        <p>Horisontal start</p>
                        <div class="InputNumber">
                            <input step="any" type="number" @bind-value="offsetXStart">
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-xl-3">
                        <p>Horisontal end</p>
                        <div class="InputNumber">
                            <input step="any" type="number" @bind-value="offsetXEnd">
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-xl-3">
                        <p>Vertikal start</p>
                        <div class="InputNumber">
                            <input step="any" type="number" @bind-value="offsetYStart">
                        </div>
                    </div>
                    <div class="col-12 col-md-6 col-xl-3">
                        <p>Vertikal end</p>
                        <div class="InputNumber">
                            <input step="any" type="number" @bind-value="offsetYEnd">
                        </div>
                    </div>
                </div>

                <div class="row" style="margin-top:40px">
                    <b>Walls</b>
                    <button class="btn btn-outline-success fw-bold" style="border-width:2px; max-width:300px; margin:auto; margin-bottom:20px" @onclick="AddWall"> Add Wall </button>

                    @if (currentWall != null)
                    {
                        <button class="btn btn-outline-danger fw-bold" style="border-width:2px; max-width:300px; margin:auto; margin-bottom:20px" @onclick="StopWall"> Finish wall </button>
                        <button class="btn btn-outline-warning fw-bold" style="border-width:2px; max-width:300px; margin:auto; margin-bottom:20px" @onclick="x => {currentWall.RemoveWallpoint(-1);}" disabled="@(currentWall.WallPoints.Count == 0)"> Remove last point </button>
                    }



                    <div class="row" style="margin:auto;width:100%">
                        @foreach (var wall in thisField.Walls)
                        {
                            <div class="col-sm-12 col-md-6 col-lg-3 p-0">
                                <div @onclick="x => currentWall = wall" class="wallMenuItem" style="@(wall == currentWall ? "background-color:rgba(55, 255, 255, 0.2);box-shadow: inset 0px 0px 4px rgba(0, 0, 0, 0.8);" : "");">
                                    @if (wall.WallPoints.Count > 0)
                                    {
                                        <svg width="100%" height="100%" viewBox="-1 -1 101 101">
                                            <polyline width="100" height="100" points="@wall.WallPoints.Select(p => (p.x * 100).ToString(nfi) + "," + (p.y * 100).ToString(nfi)+"").Aggregate((x,y) => x + " " + y)" stroke="black" stroke-width="1" fill="none" />
                                        </svg>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>



            </div>

            <div class="col-8" style="padding:0px;">
                <div class="w-100;" style="text-align:center;">
                    @* Draw walls*@
                    <div style="width:0px; height:0px;position:relative">
                        <svg width="@imageWidth" height="@imageHeight" viewBox="0 0 @imageWidth @imageHeight">
                            @foreach (var wall in thisField.Walls)
                            {
                                @if (wall.WallPoints.Count > 0)
                                {
                                    <polyline stroke-linejoin="round"  points="@wall.WallPoints.Select(p => p.x*imageWidth + "," + p.y*imageHeight).Aggregate((x,y) => x + " " + y)" stroke="@(currentWall == wall ? "white" : "black")" stroke-width="@wall.width" fill="none" />

                                    @if (currentWall != null && currentWall == wall)
                                    {
                                        @for (int i = 0; i < wall.WallPoints.Count; i++)
                                        {
                                            <circle stroke="@(i == wall.WallPoints.Count-1 && wall == currentWall ? "yellow" : "gray")" stroke-width="2" r="5" cx="@wall.WallPoints[i].x" cy="@wall.WallPoints[i].y"></circle>
                                        }
                                    }
                                }
                            }
                        </svg>
                    </div>


                    @* Draw Grid *@
                    <div style="width:0px; height:0px;position:relative">
                        @for (int x = 0; x < gridX; x++)
                        {
                            @for (int y = 0; y < thisField.gridY; y++)
                            {
                                <div class="tile" style="width:@((gridSizeLength).ToString(nfi))px; left:@((thisField.offsetXStart + gridSizeLength*x).ToString(nfi))px; top:@((thisField.offsetYStart + gridSizeLength*y).ToString(nfi))px; @(x > 0 ? "border-left: 0px !important;" : "" ) @(y > 0 ? "border-top: 0px !important;" : "" )"></div>
                            }
                        }
                    </div>

                    @if (currentWall != null)
                    {
                        <div style="width:0px;height:0px; position:relative">
                            <div @onclick="AddWallPointHandler" style="width:@(imageWidth)px;height:@(imageHeight)px;background-color:rgba(255,255,255,0.1)">
                            </div>
                        </div>
                    }


                    <img id="FieldMap" class="w-100" src="data:image;base64, @thisField.mapImage" />
                </div>
            </div>
        </div>

    }
}