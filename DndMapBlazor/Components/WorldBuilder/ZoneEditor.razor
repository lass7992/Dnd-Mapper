@using System.Globalization
@using DndMapBlazor.Helper
@using DndMapBlazor.Models
@using DndMapBlazor.Models.Enums
@using DndMapBlazor.Models.WorldBuilderModels
@inject HttpClient Http

<div style="width:100%; margin:auto">
    @if (!IsTopLevel)
    {
        <button @onclick="x => ChangeMapEntityHandler(ThisZone.ParentZone)" class="btn btn-danger backButton" style="z-index:10;position:absolute;top:0px;left:5px;"></button>
    }

    @if (loading)
    {
        <h2>Loading</h2>
    }
    else
    {

        @if (ThisZone!.mapImage == null)
        {
            <div class="w-100;" style="text-align:center;margin-top:10px">
                <InputFile OnChange="LoadFiles" />
            </div>
        }
        else
        {
            <div class="row" style="padding:0px;margin:0px; width:100%">
                @* EditorMenu *@
                <div class="col-4" style="border:2px solid black; padding:5px; position:relative;">
                    <div class="row text-center fw-bolder text-decoration-underline" style="padding-top:10px">
                        <h2>Zone Menu</h2>
                    </div>

                    <div class="row" style="margin-top:40px">
                        <b>Zones</b>
                        <div class="row multibuttons">
                            <div class="col">
                                <button class="btn btn-outline-success fw-bold" @onclick="AddZone"> Add zone </button>
                            </div>
                            <div class="col">
                                <button class="btn btn-outline-success fw-bold" @onclick="AddField"> Add field </button>
                            </div>
                        </div>

                        @if (SelectedMapEntity != null)
                        {
                            <button class="btn btn-outline-danger fw-bold" style="border-width:2px; max-width:300px; margin:auto; margin-bottom:20px" @onclick="StopEditing"> Finish Editing</button>
                            <button class="btn btn-outline-warning fw-bold" style="border-width:2px; max-width:300px; margin:auto; margin-bottom:20px" @onclick="x => {SelectedMapEntity.RemoveWallpoint(-1);}" disabled="@(SelectedMapEntity.points.Count == 0)"> Remove last point </button>
                        }
                        <div class="row" style="margin:auto;width:100%">
                            @foreach (var entity in ThisZone.MapEntities)
                            {
                                <div class="col-md-12 col-lg-6 col-xl-4 p-0">
                                    <div @onclick="x => SelectedMapEntity = entity" class="ZoneMenuItem @(entity is Zone ? "ZoneMenuItemZone" : "ZoneMenuItemField")" style="padding:5px;position:relative; @(entity == SelectedMapEntity ? "background-color: rgba(55, 255, 255, 0.2); box-shadow: inset 0px 0px 4px rgba(0, 0, 0, 0.8);" : "");">
                                        @if (entity.points.Count > 0)
                                        {
                                            <svg width="100%" height="100%" viewBox="0 0 @(entity.width) @(entity.height)">
                                                <polyline width="@(entity.width)" height="@(entity.height)" points="@entity.points.Select(p => (p.x).ToString(info) + "," + (p.y).ToString(info)+"").Aggregate((x,y) => x + " " + y) @(entity.points[0].x + "," + entity.points[0].y)" stroke="black" stroke-width="1" fill="none" />
                                            </svg>
                                        }
                                        <div class="MenuItemNameText" style="">
                                            <input type="text" @bind-value="entity.name"/>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>



                </div>

                @* Map image *@
                <div class="col-8" style="padding:0px;">
                    <div class="w-100;" style="text-align:center;">
                        @* Draw walls*@
                        <div style="width:0px; height:0px;position:relative">
                            @foreach (var entity in ThisZone.MapEntities)
                            {
                                <div class="mapEntity" style="position:absolute;left:@(entity.x)px;top:@(entity.y)px;" @onclick="x => ChangeMapEntityHandler(entity)">
                                    <svg stroke-linejoin="bevel"  width="@entity.width" height="@entity.height">
                                            @if (entity.points.Count > 0)
                                            {
                                            <polyline stroke-linejoin="round" points="@entity.points.Select(p => p.x + "," + p.y).Aggregate((x,y) => x + " " + y) @(entity.points[0].x + "," + entity.points[0].y)" stroke="@(SelectedMapEntity == entity ? "white" : "black")" stroke-width="1" fill="none" />

                                                @if (SelectedMapEntity != null)
                                                {
                                                    @for (int i = 0; i < entity.points.Count; i++)
                                                    {
                                                        <circle stroke="@(i == entity.points.Count-1 && entity == SelectedMapEntity ? "yellow" : "gray")" stroke-width="2" r="5" cx="@entity.points[i].x" cy="@entity.points[i].y"></circle>
                                                    }
                                                }
                                            }
                                    </svg>
                                </div>
                            }
                        </div>

                        @if (SelectedMapEntity != null)
                        {
                            <div style="width:0px;height:0px; position:relative">
                                <div @onclick="AddPointHandler" style="width:@(imageWidth)px;height:@(imageHeight)px;background-color:rgba(255,255,255,0.1)">
                                </div>
                            </div>
                        }

                        <img class="w-100" src="data:image;base64, @ThisZone.mapImage" />
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public Zone? ThisZone { get; set; }

    [Parameter]
    public EventCallback<WorldMapEntity> ChangeMapEntity { get; set; }

    [Parameter]
    public bool IsTopLevel { get; set; }

    [Parameter]
    public ChangeMap ChangeMap { get; set; }


    bool loading = false;
    CultureInfo info = CultureInfo.CreateSpecificCulture("en-GB");

    private WorldMapEntity? SelectedMapEntity;


    protected override void OnInitialized()
    {
        if (ThisZone == null)
        {
            ThisZone = new Zone();
        }
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        loading = true;
        await using MemoryStream fs = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(fs);
        byte[] somBytes = ImageFileHelper.GetBytes(fs);
        ThisZone!.mapImage = Convert.ToBase64String(somBytes, 0, somBytes.Length);
        loading = false;
        this.StateHasChanged();
    }

    double imageWidth = 1222;
    double imageHeight = 1222;

    public double gridSizeLength = 4;

    public void AddZone()
    {
        var newZone = new Zone();
        newZone.ParentZone = ThisZone;
        SelectedMapEntity = newZone;
        ThisZone!.MapEntities.Add(newZone);
        this.StateHasChanged();
    }

    public void AddField()
    {
        var newField = new Field();
        SelectedMapEntity = newField;
        ThisZone!.MapEntities.Add(newField);
        this.StateHasChanged();
    }

    public void StopEditing()
    {
        SelectedMapEntity = null;
    }

    public void AddPointHandler(MouseEventArgs x)
    {
        if (SelectedMapEntity != null && x.Button == 0) 
        {           
            SelectedMapEntity.AddPoint(x.OffsetX, x.OffsetY);
        }
    }

    public void ChangeMapEntityHandler(WorldMapEntity entity)
    {
        ChangeMapEntity.InvokeAsync(entity);
    }
}
