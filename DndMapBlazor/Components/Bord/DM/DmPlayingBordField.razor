@using Blazored.LocalStorage
@using DndMapBlazor.Models
@using DndMapBlazor.Models.SessionEntites
@using DndMapBlazor.Models.SessionEntites.PlayerBordCommunication
@using System.Text.Json

@if (SessionGameMetaData.imageWidth != 0 && SessionGameMetaData.imageHeight != 0)
{
    <div style="height:0px;">
        <div style="width:@(SessionGameMetaData.imageWidth)px; height:@(SessionGameMetaData.imageWidth)px;position:relative; padding: @(thisField.offsetYStart * SessionGameMetaData.imageHeight) @(thisField.offsetXEnd * SessionGameMetaData.imageWidth) @(thisField.offsetYEnd * SessionGameMetaData.imageHeight) @(thisField.offsetXStart * SessionGameMetaData.imageWidth)">
            <div style="display:grid; width:100%;height:100%; grid-template-columns: repeat(@(thisField.gridX), 1fr);">
                @for (int y = 0; y < thisField.gridY; y++)
                {
                    @for (int x = 0; x < thisField.gridX; x++)
                    {
                        <div class="tile" style="@(x > 0 ? "border-left: 0px !important;" : "" ) @(y > 0 ? "border-top: 0px !important;" : "" )"></div>
                    }
                }
            </div>
        </div>
    </div>

    <div style="border:2px dashed yellow; position:absolute;top:@(startY)%;left:@(startX)%; width:@(playerBordWidth)px;height:@(playerBordHeight)px">
        <div style="width:100%;height:100%; position:relative">
            <div draggable="true" @ondragend="Drag" style="background-color:black;width:50px; height:10px; position:absolute; bottom:0px; left:50%; transform:translateX(-50%) translateY(50%)"></div>
        </div>
    </div>
}




@code {
    [Parameter]
    public Field? thisField { get; set; }


    [Parameter]
    public SessionGameMetaData? SessionGameMetaData { get; set; }

    [Inject]
    ILocalStorageService? LocalStorage { get; set; }

    public double startX { get; set; } = 0;
    public double startY { get; set; } = 0;

    public double playerBordWidth = 300;
    public double playerBordHeight = 300;

    public double? ClientX;
    public double? ClientY;


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task Drag(DragEventArgs args) 
    {
        if (!ClientX.HasValue)
        {
            ClientX = args.PageX - args.OffsetX;
            ClientY = args.PageY - args.OffsetY;
        }

        startX = ((args.PageX - ClientX.Value) / SessionGameMetaData.imageWidth) * 100;
        startY = ((args.PageY - ClientY.Value) / SessionGameMetaData.imageHeight) * 100;
        startX = Math.Min(startX, 100);
        startX = Math.Max(startX, 0);
        startY = Math.Min(startY, 100);
        startY = Math.Max(startY, 0);


        var data = JsonSerializer.Serialize(new ChangeView(){xStart = startX, yStart = startY });

        // Set new command
        var command = new GameCommunicationModel()
            {
                state = GameCommunicationState.Running,
                Command = GameCommunicationCommand.ChangeView,
                data = data
            };

        await LocalStorage!.SetItemAsync("command", command);
    }

}
