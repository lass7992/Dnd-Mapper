@using Blazored.LocalStorage
@using DndMapBlazor.Models
@using DndMapBlazor.Models.SessionEntites
@using DndMapBlazor.Models.SessionEntites.PlayerBordCommunication
@using System.Text.Json

@if (sessionGameMetaData!.DmImageWidth != 0 && sessionGameMetaData.DmImageHeight != 0)
{
    <div style="height:0px;">
        <div style="width:@(sessionGameMetaData.DmImageWidth)px; height:@(sessionGameMetaData.DmImageHeight)px;position:relative; padding: @(thisField!.offsetYStart * sessionGameMetaData.DmImageHeight) @(thisField.offsetXEnd * sessionGameMetaData.DmImageWidth) @(thisField.offsetYEnd * sessionGameMetaData.DmImageHeight) @(thisField.offsetXStart * sessionGameMetaData.DmImageWidth)">
            <div style="display:grid; width:100%;height:100%; grid-template-columns: repeat(@(thisField.gridX), 1fr);">
                @for (int y = 0; y < thisField.gridY; y++)
                {
                    @for (int x = 0; x < thisField.gridX; x++)
                    {
                        <div class="tile" style="@(x > 0 ? "border-left: 0px !important;" : "" ) @(y > 0 ? "border-top: 0px !important;" : "" )"></div>
                    }
                }
            </div>
            @* Tokens *@
            @foreach (var token in tokens)
            {
                <div draggable="true" @ondragend="x => DragToken(x, token)" style="z-index:100; border-radius:100%;background: radial-gradient(circle, rgba(255, 255, 255, 1) 50%, rgba(195, 195, 195, 1) 80%); padding:4px; transition: 0.2s linear; position: absolute; width:@(GridSizeInPX)px; height:@(GridSizeInPX)px; left:@(((double)token.X/(double)thisField.gridX)*100)%; top:@(((double)token.Y/(double)thisField.gridY)*100)%">
                    <div style="position:relative;border-radius:100%; padding:2px; overflow:hidden; height:100%; width:100%; border: solid black 2px;
                    @(string.IsNullOrWhiteSpace(token.img) ? "background:white;" : $"background-image: url('data:image;base64, {token!.img}'); background-size:300%; background-position: 50% 10%")                    
                    ">
                        <span style="position:absolute; top:-60%; left:50%; transform:translateX(-50%); font-weight:bolder; color:black; text-shadow: 0px 0px 3px greenyellow;"> @token.Name </span>
                    </div>
                 </div>
            }

        </div>
    </div>

    <div id="PlayerView" draggable="true" ondrag="OnDrag(event)" onDragStart="SetDragImage(event)" @ondragend="DragView" style="background-color:black;width:50px; height:10px;position:absolute;top:calc(@(Y)% - 5px) ;left:calc(@(X)% - 25px); overflow:visible">
        <div draggable="false" style="pointer-events:none; border:2px dashed yellow; width:@(playerBordWidth)px;height:@(playerBordHeight)px; position:absolute; bottom:0px; left:50%; transform:translateX(-50%) translateY(-4px); ">
            <div style="width:100%;height:100%; position:relative">
            </div>
        </div>
    </div>


    <div id="PlayerViewImage" style="background-color:black;width:50px; height:10px;position:fixed;top:-10000px;">
        <div draggable="false" style="pointer-events:none; border:2px dashed yellow; width:@(playerBordWidth)px;height:@(playerBordHeight)px; position:absolute; bottom:0px; left:50%; transform:translateX(-50%) translateY(-4px); ">
            <div style="width:100%;height:100%; position:relative">
            </div>
        </div>
    </div>
    <div id="EmptyDragImage" style="width:0px;height:0px;position: fixed; top:-1000px"></div>




    @if (playerTokenHasBeenSet)
    {
        //Camara placement
        @if (sessionGameMetaData.UseCamara)
        {

        }
        // Manuel placement
        else
        {

        }
    }
}