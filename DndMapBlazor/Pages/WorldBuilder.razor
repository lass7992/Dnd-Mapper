@page "/WorldBuilder"
@using System.Globalization
@using DndMapBlazor.Components.WorldBuilder
@using DndMapBlazor.Helper
@using DndMapBlazor.Models
@using DndMapBlazor.Models.Enums
@using DndMapBlazor.Models.WorldBuilderModels
@using System.Text
@inject IJSRuntime JS

@inject HttpClient Http

<PageTitle>World Builder</PageTitle>
<div style="width:80%; margin:auto; ">
    <div style="background:white; position:fixed; top:0px; left:0px; width:100vW; height:100vh; "></div>
    @* Menu selector *@
    <nav class="navbar navbar-expand-sm navbar-dark bg-dark" style="padding-left:10px; border-radius: 10px 10px 0px 0px">
        <a class="navbar-brand" @onclick="x => {selectedField = null; selectedWorld = topWorld; currentMenuItem = WorldBuilderMenuItems.None;}">Top</a>

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item @(currentMenuItem == WorldBuilderMenuItems.None ? "active" : "")">
                    <a class="nav-link" @onclick="x => currentMenuItem = WorldBuilderMenuItems.None">World</a>
                </li>
                @if (selectedField != null)
                {
                    <li class="nav-item @(currentMenuItem == WorldBuilderMenuItems.EditField ? "active" : "")">
                        <a class="nav-link" @onclick="x => currentMenuItem = WorldBuilderMenuItems.EditField">Field</a>
                    </li>
                }
            </ul>

            <div style="right: 0px;position: absolute;margin-right: 10px;">
                <button @onclick="SaveWorld" class="btn btn-outline-success" type="submit">Save</button>
                <button @onclick="LoadWorld" disabled class="btn btn-outline-warning" type="submit" style="opacity:30%; background: repeating-linear-gradient(45deg,rgba(200,200,200,0.4),rgba(200,200,200,0.4) 5px,rgba(100,100,100,0.4) 5px,  rgba(100,100,100,0.4) 10px);">Load</button>
            </div>

        </div>
    </nav>

    <div style="position:relative; width:100%; display:@(RunChangeZone ? "none" : "block")">
        @if(currentMenuItem == WorldBuilderMenuItems.None)
        {
            <ZoneEditor IsTopLevel="selectedWorld == topWorld" ThisZone="selectedWorld" ChangeMapEntity="ChangeSelected" ChangeMap="changeMap"></ZoneEditor>
        }
        else if(currentMenuItem == WorldBuilderMenuItems.EditField)
        {
            <FieldEditor thisField="selectedField"></FieldEditor>
        }
    </div>

    @if (RunChangeZone && (changeMap.ToImage != null || changeMap.FromImage != null))
    {
        <div class="row" style="padding:0px;margin:0px; width:100%">
            <div class="col-4" style="border:2px solid black; padding:5px; position:relative; background-color:lightgray; opacity:0">
            </div>
            <div class="col-8" style="padding:0px;">
                <div style="position:relative;width:100%; overflow:hidden; height:800px">
                    @if (@changeMap.ToImage != null)
                    {
                        <img class="w-100" src="data:image;base64, @changeMap.ToImage" style="position:absolute;top:0;left:0; transform-origin: @((changeMap.xPos*100) + "% " + (changeMap.yPos*100)+ "%"); position:absolute;top:0;left:0;transition:normal linear @(mapChangeAnimationTime)s;transform:scale(@(changeMap.ZoomIn ?? true ? "1" : (RunChangeZoneAnimation ? "1" : "10"))); " />
                    }
                    @if (@changeMap.FromImage != null)
                    {
                        <img class="w-100" src="data:image;base64, @changeMap.FromImage" style="transform-origin: @((changeMap.xPos*100) + "% " + (changeMap.yPos*100)+ "%"); position:absolute;top:0;left:0;transition:normal linear @(mapChangeAnimationTime)s; transform:scale(@(RunChangeZoneAnimation && (changeMap.ZoomIn ?? true) ? "10" : "1"));  opacity:@(RunChangeZoneAnimation ? "0" : "100")" />
                        @* <img class="w-100" src="data:image;base64, @changeMap.FromImage" style="animation-iteration-count: infinite; animation-play-state:running; animation-direction:normal; @((changeMap.ZoomIn ?? true) ? "animation: zoomIn 2s;" : "animation: fadeOut 2s;" )" /> *@
                    }
                    @* <img class="w-100" src="data:image;base64, @changeMap.ToImage" style="@((changeMap.ZoomIn ?? true) ? "" : "animation: zoomOut 2s;" )" /> *@
                </div>
            </div>

        </div>

    }

</div>


@code{
    public Zone topWorld { get; set; } = new Zone();
    public Zone? selectedWorld { get; set; }
    public Field? selectedField { get; set; }

    public ChangeMap changeMap { get; set; } = new ChangeMap();
    public bool RunChangeZone { get; set; } = false;
    public bool RunChangeZoneAnimation { get; set; } = false;

    public double mapChangeAnimationTime { get; set; } = 0.8;

    protected override void OnInitialized()
    {
        selectedWorld = topWorld;
        StartAnimationTimer = new System.Timers.Timer(10);
        StartAnimationTimer.Elapsed += (x, y) =>
        {
            RunChangeZoneAnimation = true;
            this.StateHasChanged();
        };
        StartAnimationTimer.AutoReset = false;
        EndAnimationTimer = new System.Timers.Timer(mapChangeAnimationTime * 1000);
        EndAnimationTimer.AutoReset = false;
        EndAnimationTimer.Elapsed += (x, y) => 
        { 
            RunChangeZoneAnimation = false; 
            RunChangeZone = false;
            this.StateHasChanged();
        };
    }

    private WorldBuilderMenuItems currentMenuItem = WorldBuilderMenuItems.None;

    System.Timers.Timer StartAnimationTimer = new System.Timers.Timer();
    System.Timers.Timer EndAnimationTimer = new System.Timers.Timer();


    private void ChangeSelected(WorldMapEntity entity)
    {   
        changeMap.FromImage = selectedWorld!.mapImage;
        changeMap.ToImage = entity.mapImage;


        if (entity == topWorld || entity == selectedWorld.ParentZone)
        {
            changeMap.ZoomIn = false;
            changeMap.xPos = ((selectedWorld.x + (selectedWorld.width / 2)));
            changeMap.yPos = ((selectedWorld.y + (selectedWorld.height / 2)));
        }
        else
        {
            changeMap.ZoomIn = true;
            changeMap.xPos = (entity.x + (entity.width / 2));
            changeMap.yPos = (entity.y + (entity.height / 2));
        }

        changeMap.height = 800;

        RunChangeZone = true;
        RunChangeZoneAnimation = false;
        StartAnimationTimer.Start();
        EndAnimationTimer.Start();

        if (entity is Zone)
        {
            selectedWorld = entity as Zone;
            selectedField = null;
        }
        else if (entity is Field)
        {
            selectedField = entity as Field;
            currentMenuItem = WorldBuilderMenuItems.EditField;
        }  
    }

    private void LoadWorld()
    {
        // Create Load
        //var saveJson = System.Text.Json.JsonSerializer.Deserialize<Zone>(topWorld);
    }

    private async Task SaveWorld()
    {
        topWorld.SaveZone();
        var saveJson = System.Text.Json.JsonSerializer.Serialize(topWorld);
        await TriggerDownloadFileFromStream(saveJson);
    }


    private async Task TriggerDownloadFileFromStream(string file)
    {
        var fileName = "DnDsave.json";
        using MemoryStream mem = new MemoryStream(Encoding.UTF8.GetBytes(file));
        using var streamRef = new DotNetStreamReference(stream: mem);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
